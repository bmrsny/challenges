#!/usr/bin/env ruby

class Pather
  attr_accessor :map
  attr_reader   :markers, :find_char

  def initialize
    @find_char    = "#"
    @markers      = []
  end

  def create_path
    read_map

    set_coordinates

    generate_path

    output_map
  end

  def read_map
    path_map     = ""
    f =  File.open(ARGV[0], "r")
    f.each_line {|line| path_map << line}
    @map = path_map.split("\n").map(&:chars)
  end

  def generate_path
    markers.each_with_index do |_, index|
      @index  = index
      draw_path unless next_marker == nil
    end
  end

  def output_map
    final_map = map.flat_map(&:join).join("\n") + "\n"
    new_file = File.open(ARGV[1], "w")
    new_file << final_map
  end

  def draw_path
    case
    when valid_row?
      set_row_connection(current_marker, next_marker)
      #when valid_column? then set_column_connection(current_marker, next_marker)
      #when valid_column?
      #set_connection(current_marker, next_marker)
    else
      set_connection(current_marker, next_marker)
    end
  end


  def current_marker
    markers[@index]
  end

  def next_marker
    markers[@index + 1]
  end

  def current_row
    current_marker[0]
  end

  def next_row
    next_marker[0]
  end

  def valid_row?
    current_row == next_row
  end

  def valid_midpoint_row?
    next_row == @midpoint[0]
  end

  def valid_midpoint_column?
    current_marker[1] == @midpoint[1]
  end

  def set_row_connection(start, finish)
    current_index = start[1]
    until current_index == (finish[1] - 1)
      current_index += 1
      map[start[0]][current_index] = "*"
    end
  end

  def valid_column?
    current_marker[1] == @midpoint[1]
  end

  def set_column_connection(current_marker, next_marker)
    current_index     = current_marker[1]
    current_row_index = current_row
    until current_row_index == next_row
      current_row_index += 1
      map[current_row_index][current_index] = "*"
    end
  end

  def set_connection(current_marker, next_marker)
    set_midpoint_marker
    set_column_connection(current_marker, next_marker)
    left_or_right
  end

  def left_or_right
    if next_marker[1] > @midpoint[1]
      set_row_connection(@midpoint, next_marker)
    else
      set_row_connection(next_marker, @midpoint)
    end
  end

  def set_midpoint_marker
    if current_marker[1] >= next_marker[1]
      difference = current_marker[1] - next_marker[1]
      @midpoint  = [next_row, next_marker[1] + difference]
    else
      difference = next_marker[1] - current_marker[1]
      @midpoint  = [next_row, next_marker[1] - difference]
    end
  end

  def set_coordinates
    map.each_with_index do |row, index|
      add_markers(row, index) if row.include?(find_char)
    end
  end

  def add_markers(row, index)
    row.each_with_index do |char, char_index|
      markers << [index, char_index] if char == find_char
    end
  end
end

path = Pather.new
path.create_path
